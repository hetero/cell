#ifndef SPE_ONLY_H
#define SPE_ONLY_H

typedef __vector unsigned char VUC;
typedef __vector float VF;
typedef __vector signed int VSI;
typedef __vector signed short VSS;

VUC merge_mask
    = (VUC) {0,1,2,3,4,5,6,7,16,17,18,19,20,21,22,23};

VUC mask[16] = { 
    (VUC) {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
    (VUC) {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16},
    (VUC) {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17},
    (VUC) {3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18},
    (VUC) {4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19},
    (VUC) {5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20},
    (VUC) {6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21},
    (VUC) {7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22},
    (VUC) {8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23},
    (VUC) {9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24},
    (VUC) {10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25},
    (VUC) {11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26},
    (VUC) {12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27},
    (VUC) {13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28},
    (VUC) {14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29},
    (VUC) {15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30}
};

VUC mask_dct1[16] = {
    (VUC) {0x80, 0x80, 0x80, 0, 0x80, 0x80, 0x80, 1 ,0x80, 0x80, 0x80, 2, 0x80, 0x80, 0x80, 3},
    (VUC) {0x80, 0x80, 0x80, 1, 0x80, 0x80, 0x80, 2, 0x80, 0x80, 0x80, 3, 0x80, 0x80, 0x80, 4},
    (VUC) {0x80, 0x80, 0x80, 2, 0x80, 0x80, 0x80, 3, 0x80, 0x80, 0x80, 4, 0x80, 0x80, 0x80, 5},
    (VUC) {0x80, 0x80, 0x80, 3, 0x80, 0x80, 0x80, 4, 0x80, 0x80, 0x80, 5, 0x80, 0x80, 0x80, 6},
    (VUC) {0x80, 0x80, 0x80, 4, 0x80, 0x80, 0x80, 5, 0x80, 0x80, 0x80, 6, 0x80, 0x80, 0x80, 7},
    (VUC) {0x80, 0x80, 0x80, 5, 0x80, 0x80, 0x80, 6, 0x80, 0x80, 0x80, 7, 0x80, 0x80, 0x80, 8},
    (VUC) {0x80, 0x80, 0x80, 6, 0x80, 0x80, 0x80, 7, 0x80, 0x80, 0x80, 8, 0x80, 0x80, 0x80, 9},
    (VUC) {0x80, 0x80, 0x80, 7, 0x80, 0x80, 0x80, 8, 0x80, 0x80, 0x80, 9, 0x80, 0x80, 0x80, 10},
    (VUC) {0x80, 0x80, 0x80, 8, 0x80, 0x80, 0x80, 9, 0x80, 0x80, 0x80, 10, 0x80, 0x80, 0x80, 11},
    (VUC) {0x80, 0x80, 0x80, 9, 0x80, 0x80, 0x80, 10, 0x80, 0x80, 0x80, 11, 0x80, 0x80, 0x80, 12},
    (VUC) {0x80, 0x80, 0x80, 10, 0x80, 0x80, 0x80, 11, 0x80, 0x80, 0x80, 12, 0x80, 0x80, 0x80, 13},
    (VUC) {0x80, 0x80, 0x80, 11, 0x80, 0x80, 0x80, 12, 0x80, 0x80, 0x80, 13, 0x80, 0x80, 0x80, 14},
    (VUC) {0x80, 0x80, 0x80, 12, 0x80, 0x80, 0x80, 13, 0x80, 0x80, 0x80, 14, 0x80, 0x80, 0x80, 15},
    (VUC) {0x80, 0x80, 0x80, 13, 0x80, 0x80, 0x80, 14, 0x80, 0x80, 0x80, 15, 0x80, 0x80, 0x80, 16},
    (VUC) {0x80, 0x80, 0x80, 14, 0x80, 0x80, 0x80, 15, 0x80, 0x80, 0x80, 16, 0x80, 0x80, 0x80, 17},
    (VUC) {0x80, 0x80, 0x80, 15, 0x80, 0x80, 0x80, 16, 0x80, 0x80, 0x80, 17, 0x80, 0x80, 0x80, 18},
};

VUC mask_dct2[16] = {
    (VUC) {0x80, 0x80, 0x80, 4, 0x80, 0x80, 0x80, 5, 0x80, 0x80, 0x80, 6, 0x80, 0x80, 0x80, 7},
    (VUC) {0x80, 0x80, 0x80, 5, 0x80, 0x80, 0x80, 6, 0x80, 0x80, 0x80, 7, 0x80, 0x80, 0x80, 8},
    (VUC) {0x80, 0x80, 0x80, 6, 0x80, 0x80, 0x80, 7, 0x80, 0x80, 0x80, 8, 0x80, 0x80, 0x80, 9},
    (VUC) {0x80, 0x80, 0x80, 7, 0x80, 0x80, 0x80, 8, 0x80, 0x80, 0x80, 9, 0x80, 0x80, 0x80, 10},
    (VUC) {0x80, 0x80, 0x80, 8, 0x80, 0x80, 0x80, 9, 0x80, 0x80, 0x80, 10, 0x80, 0x80, 0x80, 11},
    (VUC) {0x80, 0x80, 0x80, 9, 0x80, 0x80, 0x80, 10, 0x80, 0x80, 0x80, 11, 0x80, 0x80, 0x80, 12},
    (VUC) {0x80, 0x80, 0x80, 10, 0x80, 0x80, 0x80, 11, 0x80, 0x80, 0x80, 12, 0x80, 0x80, 0x80, 13},
    (VUC) {0x80, 0x80, 0x80, 11, 0x80, 0x80, 0x80, 12, 0x80, 0x80, 0x80, 13, 0x80, 0x80, 0x80, 14},
    (VUC) {0x80, 0x80, 0x80, 12, 0x80, 0x80, 0x80, 13, 0x80, 0x80, 0x80, 14, 0x80, 0x80, 0x80, 15},
    (VUC) {0x80, 0x80, 0x80, 13, 0x80, 0x80, 0x80, 14, 0x80, 0x80, 0x80, 15, 0x80, 0x80, 0x80, 16},
    (VUC) {0x80, 0x80, 0x80, 14, 0x80, 0x80, 0x80, 15, 0x80, 0x80, 0x80, 16, 0x80, 0x80, 0x80, 17},
    (VUC) {0x80, 0x80, 0x80, 15, 0x80, 0x80, 0x80, 16, 0x80, 0x80, 0x80, 17, 0x80, 0x80, 0x80, 18},
    (VUC) {0x80, 0x80, 0x80, 16, 0x80, 0x80, 0x80, 17, 0x80, 0x80, 0x80, 18, 0x80, 0x80, 0x80, 19},
    (VUC) {0x80, 0x80, 0x80, 17, 0x80, 0x80, 0x80, 18, 0x80, 0x80, 0x80, 19, 0x80, 0x80, 0x80, 20},
    (VUC) {0x80, 0x80, 0x80, 18, 0x80, 0x80, 0x80, 19, 0x80, 0x80, 0x80, 20, 0x80, 0x80, 0x80, 21},
    (VUC) {0x80, 0x80, 0x80, 19, 0x80, 0x80, 0x80, 20, 0x80, 0x80, 0x80, 21, 0x80, 0x80, 0x80, 22},
};

uint8_t yquanttbl_def[64] __attribute__((aligned(16))) =
{
    16, 11, 12, 14, 12, 10, 16, 14,
    13, 14, 18, 17, 16, 19, 24, 40,
    26, 24, 22, 22, 24, 49, 35, 37,
    29, 40, 58, 51, 61, 30, 57, 51,
    56, 55, 64, 72, 92, 78, 64, 68,
    87, 69, 55, 56, 80, 109, 81, 87,
    95, 98, 103, 104, 103, 62, 77, 113,
    121, 112, 100, 120, 92, 101, 103, 99
};


uint8_t uvquanttbl_def[64] __attribute__((aligned(16))) =
{
    17, 18, 18, 24, 21, 24, 47, 26,
    26, 47, 99, 66, 56, 66, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99,
    99, 99, 99, 99, 99, 99, 99, 99
};

uint8_t zigzag_U[64] __attribute__((aligned(16)))=
{
    0,
    1, 0,
    0, 1, 2,
    3, 2, 1, 0,
    0, 1, 2, 3, 4,
    5, 4, 3, 2, 1, 0,
    0, 1, 2, 3, 4, 5, 6,
    7, 6, 5, 4, 3, 2, 1, 0,
    1, 2, 3, 4, 5, 6, 7,
    7, 6, 5, 4, 3, 2,
    3, 4, 5, 6, 7,
    7, 6, 5, 4,
    5, 6, 7,
    7, 6,
    7,
};

uint8_t zigzag_V[64] __attribute__((aligned(16)))=
{
    0,
    0, 1,
    2, 1, 0,
    0, 1, 2, 3,
    4, 3, 2, 1, 0,
    0, 1, 2, 3, 4, 5,
    6, 5, 4, 3, 2, 1, 0,
    0, 1, 2, 3, 4, 5, 6, 7,
    7, 6, 5, 4, 3, 2, 1,
    2, 3, 4, 5, 6, 7,
    7, 6, 5, 4, 3,
    4, 5, 6, 7,
    7, 6, 5,
    6, 7,
    7,
};

VF vec_dctlookup[8][2] = {
    {(VF) {1.000000, 1.000000, 1.000000, 1.000000}, (VF) {1.000000, 1.000000, 1.000000, 1.000000}}, 
    {(VF) {0.980785, 0.831470, 0.555570, 0.195090}, (VF) {-0.195090, -0.555570, -0.831470, -0.980785}}, 
    {(VF) {0.923880, 0.382683, -0.382683, -0.923880}, (VF) {-0.923880, -0.382683, 0.382683, 0.923880}}, 
    {(VF) {0.831470, -0.195090, -0.980785, -0.555570}, (VF) {0.555570, 0.980785, 0.195090, -0.831470}}, 
    {(VF) {0.707107, -0.707107, -0.707107, 0.707107}, (VF) {0.707107, -0.707107, -0.707107, 0.707107}}, 
    {(VF) {0.555570, -0.980785, 0.195090, 0.831470}, (VF) {-0.831470, -0.195090, 0.980785, -0.555570}}, 
    {(VF) {0.382683, -0.923880, 0.923880, -0.382683}, (VF) {-0.382683, 0.923880, -0.923880, 0.382683}}, 
    {(VF) {0.195090, -0.555570, 0.831470, -0.980785}, (VF) {0.980785, -0.831470, 0.555570, -0.195090}}
};

VF vec_idctlookup[8][8] = {
    {(VF) {1.000000f, 0.980785f, 0.923880f, 0.831470f, }, (VF) {0.707107f, 0.555570f, 0.382683f, 0.195090f, }},
    {(VF) {1.000000f, 0.831470f, 0.382683f, -0.195090f, }, (VF) {-0.707107f, -0.980785f, -0.923880f, -0.555570f, }},
    {(VF) {1.000000f, 0.555570f, -0.382683f, -0.980785f, }, (VF) {-0.707107f, 0.195090f, 0.923880f, 0.831470f, }},
    {(VF) {1.000000f, 0.195090f, -0.923880f, -0.555570f, }, (VF) {0.707107f, 0.831470f, -0.382683f, -0.980785f, }},
    {(VF) {1.000000f, -0.195090f, -0.923880f, 0.555570f, }, (VF) {0.707107f, -0.831470f, -0.382683f, 0.980785f, }},
    {(VF) {1.000000f, -0.555570f, -0.382683f, 0.980785f, }, (VF) {-0.707107f, -0.195090f, 0.923880f, -0.831470f, }},
    {(VF) {1.000000f, -0.831470f, 0.382683f, 0.195090f, }, (VF) {-0.707107f, 0.980785f, -0.923880f, 0.555570f, }},
    {(VF) {1.000000f, -0.980785f, 0.923880f, -0.831470f, }, (VF) {0.707107f, -0.555570f, 0.382683f, -0.195090f, }},
};

const int big_diamond_array[9 * 2] = { 
     0,  0,
     2,  0,
     1,  1,
     0,  2,
    -1,  1,
    -2,  0,
    -1, -1, 
     0, -2, 
     1, -1
};

const int small_diamond_array[5 * 2] = { 
     0,  0,
     1,  0,
     0,  1,
    -1,  0,
     0, -1
};

const int *big_diamond = big_diamond_array;
const int *small_diamond = small_diamond_array;

#endif
